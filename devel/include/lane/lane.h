// Generated by gencpp from file lane/lane.msg
// DO NOT EDIT!


#ifndef LANE_MESSAGE_LANE_H
#define LANE_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lane
{
template <class ContainerAllocator>
struct lane_
{
  typedef lane_<ContainerAllocator> Type;

  lane_()
    : angle(0)
    , delta_x(0)  {
    }
  lane_(const ContainerAllocator& _alloc)
    : angle(0)
    , delta_x(0)  {
  (void)_alloc;
    }



   typedef int8_t _angle_type;
  _angle_type angle;

   typedef int8_t _delta_x_type;
  _delta_x_type delta_x;





  typedef boost::shared_ptr< ::lane::lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lane::lane_<ContainerAllocator> const> ConstPtr;

}; // struct lane_

typedef ::lane::lane_<std::allocator<void> > lane;

typedef boost::shared_ptr< ::lane::lane > lanePtr;
typedef boost::shared_ptr< ::lane::lane const> laneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lane::lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lane::lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lane::lane_<ContainerAllocator1> & lhs, const ::lane::lane_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.delta_x == rhs.delta_x;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lane::lane_<ContainerAllocator1> & lhs, const ::lane::lane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lane

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lane::lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lane::lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lane::lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lane::lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane::lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane::lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lane::lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c27dae8bfb83971b171f1e3e63f6b5f6";
  }

  static const char* value(const ::lane::lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc27dae8bfb83971bULL;
  static const uint64_t static_value2 = 0x171f1e3e63f6b5f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::lane::lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lane/lane";
  }

  static const char* value(const ::lane::lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lane::lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8  angle\n"
"int8  delta_x\n"
;
  }

  static const char* value(const ::lane::lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lane::lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.delta_x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lane::lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lane::lane_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<int8_t>::stream(s, indent + "  ", v.angle);
    s << indent << "delta_x: ";
    Printer<int8_t>::stream(s, indent + "  ", v.delta_x);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANE_MESSAGE_LANE_H
